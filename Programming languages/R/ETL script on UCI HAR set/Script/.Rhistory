x
lag(x)
x - lag(x)
x - lead(x)
x - lead(x, n = 2)
?min_rank()
lag() #pone un NA al principio del vector.
x <- c(5, 1, 3, 2, 2, NA)
row_number(x)
min_rank(x)
dense_rank(x)
percent_rank(x)
cume_dist(x)
y <- c(1,5,7,89)
min_rank(y)
max_rank(y)
min_rank(desc(y))
y <- c(4,75,234,8,4123,77,5,1)
min_rank(y)
delays %>%
filter(n>25) %>%
ggplot(mapping = aes(x = n, y = delay)) +
geom_point(alpha = 1/10)
library(tidyverse)
delays %>%
filter(n>25) %>%
ggplot(mapping = aes(x = n, y = delay)) +
geom_point(alpha = 1/10)
library(nycflights13)
delays %>%
filter(n>25) %>%
ggplot(mapping = aes(x = n, y = delay)) +
geom_point(alpha = 1/10)
delays <- not_cancelled %>%
group_by(tailnum) %>%
summarise(
delay = mean(arr_delay)
)
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
delays <- not_cancelled %>%
group_by(tailnum) %>%
summarise(
delay = mean(arr_delay)
)
t_cancelled %>%
group_by(t
delays %>%
filter(n>25) %>%
ggplot(mapping = aes(x = n, y = delay)) +
geom_point(alpha = 1/10)
ggplot(data= delays, mapping = aes(x = n, y = delay)) + geom_point(alpha = 1/10)
batters <- batting %>%
summarise(
ba = sum(H, na.rm = TRUE) / sum(AB, na.rm = TRUE),
ab = sum(AB, na.rm = TRUE)
)
batting <- as_tibble(Lahman::Batting)
batters <- batting %>%
summarise(
ba = sum(H, na.rm = TRUE) / sum(AB, na.rm = TRUE),
ab = sum(AB, na.rm = TRUE)
)
batters %>
batters %>%
filter(ab > 100) %>%
ggplot(mapping = aes(x = ab, y=ba))+
geom_point() +
geom_smooth(se = FALSE))
batters %>%
filter(ab > 100) %>%
ggplot(mapping = aes(x = ab, y=ba))+
geom_point() +
geom_smooth(se = FALSE)
batters %>%
filter(ab > 100) %>%
ggplot(mapping = aes(x = ab, y=ba))+
geom_point() +
geom_smooth(se = FALSE)
view(batters)
Lahman::Batting
Lahman::Batting
view(batting)
view(batters)
View(batters)
View(batters)
View(batters)
rm(batters)
batters <- batting %>% summarise(ba = sum(H, na.rm = TRUE) / sum(AB, na.rm = TRUE), ab = sum(AB, na.rm = TRUE))
batters <- batting %>%
group_by(PlayerID) %>%
summarise(
ba = sum(H, na.rm = TRUE) / sum(AB, na.rm = TRUE),
ab = sum(AB, na.rm = TRUE)
)
rm(batters)
batters <- batting %>%
group_by(PlayerID) %>%
summarise(
ba = sum(H, na.rm = TRUE) / sum(AB, na.rm = TRUE),
ab = sum(AB, na.rm = TRUE)
)
batters <- batting %>%
group_by(playerID) %>%
summarise(
ba = sum(H, na.rm = TRUE) / sum(AB, na.rm = TRUE),
ab = sum(AB, na.rm = TRUE)
)
library(tidyverse)
subject_test <- read.delim(subject_test.txt)
subject_test <- read.delim(//subject_test.txt)
subject_test <- read.delim(/subject_test.txt)
install.packages(vroom)
install.packages('vroom')
library(vroom)
?t.test()
#R version 4.0.5
# v2.0 notes   #########################################################################
#-Removed #4.0: This didn't remove all the f variables, nor is it necessary since later on they are removed
#by greps.
#-Removed #5.0: It only created the finaldf dataframe and arranged the columns, both can be skipped because of #6.
#-Removed library(dplyr) because it was creating a compatibility issue
#Line 85 is corrected. Luckily activity ends with y and that's why it matched the regular expression search, otherwise I would have missed that column.
#+Added SQL functionality. The script will create a table in a database named 'Halter' in a local SQL server using the same data used to export to csv.
########################################################################################
#1.0 Loading necessary libraries
library(tidyverse) #General data frame wrangling functions
library(writexl) #Writing the UCI file into csv/xl
library(reshape2) #Used to melt/cast the data
library(sqldf) #Able to select data frames with SQL SELECT statements
library(odbc) #Driver for the SQL database
#library(dplyr) #Advanced/simplification for data frame wrangling
#2.0 Loading the respective files to dataframes.
#(Set working directory to source file location #using Session > Set working directory > To source file location.)
#2.1 Loading features and activity labels
features <- read.table("./data/features.txt", header = FALSE , sep = "") #contains the variables
activity_labels <- read.table("./data/activity_labels.txt", header = FALSE , sep = "") #contains the activities
#2.2 Changing column names for easier readability
colnames(features) <- c("variableId", "variable")
colnames(activity_labels) <- c("activityId", "activity")
#2.3 Loading test files into dataframes for future merge
subject_test <- read.table("./data/subject_test.txt", header = FALSE , sep = "")
X_test <- read.table("./data/X_test.txt", header = FALSE , sep = "")
y_test <- read.table("./data/y_test.txt", header = FALSE , sep = "")
#2.4 Changing column names for test data frames for easier readability and compatibility between data frames
colnames(X_test) <- features$variable
colnames(y_test) <- "activityId"
colnames(subject_test) <- "subjectId"
#2.5 Loading train files into data frames for future merge
subject_train <- read.table("./data/subject_train.txt", header = FALSE , sep = "")
X_train <- read.table("./data/X_train.txt", header = FALSE , sep = "")
y_train <- read.table("./data/y_train.txt", header = FALSE , sep = "")
#2.6 Changing column names for train data frames for easier readability and compatibility between data frames
colnames(X_train) <- features$variable
colnames(y_train) <- "activityId"
colnames(subject_train) <- "subjectId"
#3.0 Binding and merging of test and train data frames
#3.1 binding of test data frame
testdf <- cbind(X_test,y_test,subject_test)
#3.2 binding of train data frame
traindf <- cbind(X_train,y_train,subject_train)
#3.3 binding of train and test data frames
bounddf <- rbind(testdf,traindf)
#3.4 merging of train+test data frame with activity labels in order to have the name of the activities.
mergeddf <- merge(bounddf,activity_labels)
#Removed. This didn't removed all the f variables, nor is it neccesary since later on they are removed
#by greps
#4.0 Removing of the {f} variables.
#mergeddf <- mergeddf[,-c(1,462:503)]
#Removed. It only created the finaldf dataframe and arranged the columns, both can be skipped because of #6.
#5.0 Sorting the dataset to have SubjectId and activty on the first 2 columns in order to improve readability
#finaldf <- mergeddf %>%
#select(subjectId, activity, everything())
#6.0 Transforming the data frame in order to obtain the variables we are interested in
#6.1 Isolating mean, std, max and min variables
var_index <- grep("^t.*mean\\(\\)|^t.*std\\(\\)|^t.*max\\(\\)|^t.*min\\(\\)", names(mergeddf))
finaldf_subset <- select(mergeddf , c(subjectId,activity, var_index))
#6.2 Isolating X,Y and Z components only.
var_index <- grep(".*x$|.*y$|.*z$", names(finaldf_subset), ignore.case = TRUE)
finaldf_subset <- select(finaldf_subset , c(subjectId,activity, var_index)) #NOT CORRECT! I'm lucky it worked because activity ends with *y$. Here it is already corrected
#7.0 removing parenthesis and the letter t at the beginning of every variable to improve readability
names(finaldf_subset) <- gsub("\\(\\)","",names(finaldf_subset)) #removing () from column names
names(finaldf_subset) <- gsub("^t","",names(finaldf_subset)) #removing t from the start of each variable
#8.0 Grouping of SubjectId and activity. Dplyr functions work only on grouped data frames.
arrangeddf <- finaldf_subset %>% group_by(subjectId,activity)
arrangeddf <- arrangeddf[order(arrangeddf$subjectId, arrangeddf$activity),]
#9.0 Melting the data frame in order to obtain a csv file that can be easily read by Tableau which improves how
#the dashboard and plots are created.
finalDataMelt <- melt(finaldf_subset, id.vars=c("activity", "subjectId"), measure.vars=(names(finaldf_subset[3:62])) ) #Note, if dplyr::select() is used, then there is no need to order the columns before
arrangeddf2 <- finalDataMelt %>% group_by(subjectId,activity)
arrangeddf2 <- finalDataMelt[order(finalDataMelt$subjectId, finalDataMelt$activity),]
#10.0 Adding the time column to the melted data frame
arrangeddf2 <- arrangeddf2 %>%
group_by(activity,subjectId,variable) %>%
mutate(time = row_number())
setwd("C:/Users/amode/OneDrive/Desktop/asssessment v2.0/Script")
#R version 4.0.5
# v2.0 notes   #########################################################################
#-Removed #4.0: This didn't remove all the f variables, nor is it necessary since later on they are removed
#by greps.
#-Removed #5.0: It only created the finaldf dataframe and arranged the columns, both can be skipped because of #6.
#-Removed library(dplyr) because it was creating a compatibility issue
#Line 85 is corrected. Luckily activity ends with y and that's why it matched the regular expression search, otherwise I would have missed that column.
#+Added SQL functionality. The script will create a table in a database named 'Halter' in a local SQL server using the same data used to export to csv.
########################################################################################
#1.0 Loading necessary libraries
library(tidyverse) #General data frame wrangling functions
library(writexl) #Writing the UCI file into csv/xl
library(reshape2) #Used to melt/cast the data
library(sqldf) #Able to select data frames with SQL SELECT statements
library(odbc) #Driver for the SQL database
#library(dplyr) #Advanced/simplification for data frame wrangling
#2.0 Loading the respective files to dataframes.
#(Set working directory to source file location #using Session > Set working directory > To source file location.)
#2.1 Loading features and activity labels
features <- read.table("./data/features.txt", header = FALSE , sep = "") #contains the variables
activity_labels <- read.table("./data/activity_labels.txt", header = FALSE , sep = "") #contains the activities
#2.2 Changing column names for easier readability
colnames(features) <- c("variableId", "variable")
colnames(activity_labels) <- c("activityId", "activity")
#2.3 Loading test files into dataframes for future merge
subject_test <- read.table("./data/subject_test.txt", header = FALSE , sep = "")
X_test <- read.table("./data/X_test.txt", header = FALSE , sep = "")
y_test <- read.table("./data/y_test.txt", header = FALSE , sep = "")
#2.4 Changing column names for test data frames for easier readability and compatibility between data frames
colnames(X_test) <- features$variable
colnames(y_test) <- "activityId"
colnames(subject_test) <- "subjectId"
#2.5 Loading train files into data frames for future merge
subject_train <- read.table("./data/subject_train.txt", header = FALSE , sep = "")
X_train <- read.table("./data/X_train.txt", header = FALSE , sep = "")
y_train <- read.table("./data/y_train.txt", header = FALSE , sep = "")
#2.6 Changing column names for train data frames for easier readability and compatibility between data frames
colnames(X_train) <- features$variable
colnames(y_train) <- "activityId"
colnames(subject_train) <- "subjectId"
#3.0 Binding and merging of test and train data frames
#3.1 binding of test data frame
testdf <- cbind(X_test,y_test,subject_test)
#3.2 binding of train data frame
traindf <- cbind(X_train,y_train,subject_train)
#3.3 binding of train and test data frames
bounddf <- rbind(testdf,traindf)
#3.4 merging of train+test data frame with activity labels in order to have the name of the activities.
mergeddf <- merge(bounddf,activity_labels)
#Removed. This didn't removed all the f variables, nor is it neccesary since later on they are removed
#by greps
#4.0 Removing of the {f} variables.
#mergeddf <- mergeddf[,-c(1,462:503)]
#Removed. It only created the finaldf dataframe and arranged the columns, both can be skipped because of #6.
#5.0 Sorting the dataset to have SubjectId and activty on the first 2 columns in order to improve readability
#finaldf <- mergeddf %>%
#select(subjectId, activity, everything())
#6.0 Transforming the data frame in order to obtain the variables we are interested in
#6.1 Isolating mean, std, max and min variables
var_index <- grep("^t.*mean\\(\\)|^t.*std\\(\\)|^t.*max\\(\\)|^t.*min\\(\\)", names(mergeddf))
finaldf_subset <- select(mergeddf , c(subjectId,activity, var_index))
#6.2 Isolating X,Y and Z components only.
var_index <- grep(".*x$|.*y$|.*z$", names(finaldf_subset), ignore.case = TRUE)
finaldf_subset <- select(finaldf_subset , c(subjectId,activity, var_index)) #NOT CORRECT! I'm lucky it worked because activity ends with *y$. Here it is already corrected
#7.0 removing parenthesis and the letter t at the beginning of every variable to improve readability
names(finaldf_subset) <- gsub("\\(\\)","",names(finaldf_subset)) #removing () from column names
names(finaldf_subset) <- gsub("^t","",names(finaldf_subset)) #removing t from the start of each variable
#8.0 Grouping of SubjectId and activity. Dplyr functions work only on grouped data frames.
arrangeddf <- finaldf_subset %>% group_by(subjectId,activity)
arrangeddf <- arrangeddf[order(arrangeddf$subjectId, arrangeddf$activity),]
#9.0 Melting the data frame in order to obtain a csv file that can be easily read by Tableau which improves how
#the dashboard and plots are created.
finalDataMelt <- melt(finaldf_subset, id.vars=c("activity", "subjectId"), measure.vars=(names(finaldf_subset[3:62])) ) #Note, if dplyr::select() is used, then there is no need to order the columns before
arrangeddf2 <- finalDataMelt %>% group_by(subjectId,activity)
arrangeddf2 <- finalDataMelt[order(finalDataMelt$subjectId, finalDataMelt$activity),]
#10.0 Adding the time column to the melted data frame
arrangeddf2 <- arrangeddf2 %>%
group_by(activity,subjectId,variable) %>%
mutate(time = row_number())
df <- arrangeddf2 %>%
filter(activity = 'WALKING' | activity = 'LYING')
View(arrangeddf2)
df <- arrangeddf2 %>%
select(activity, variable, value) %>%
filter(activity = 'WALKING' | activity = 'LYING', variable = 'BodyAcc-mean-X
')
df <- arrangeddf2 %>%
select(activity, variable, value) %>%
filter(activity == 'WALKING' | activity == 'LYING', variable == 'BodyAcc-mean-X
')
df <- arrangeddf2 %>%
select(activity, variable, value) %>%
filter(activity == 'WALKING' | activity == 'LYING')
df <- arrangeddf2 %>%
select(activity, variable, value) %>%
filter(activity == "WALKING" | activity == "LYING")
df <- arrangeddf2 %>%
select(activity, variable, value) %>%
filter(activity == "WALKING" | activity == "LYING", variable = "BodyAcc-mean-X
")
df <- arrangeddf2 %>%
select(activity, variable, value) %>%
filter(activity == "WALKING" | activity == "LYING", variable == "BodyAcc-mean-X
")
df <- arrangeddf2 %>%
select(activity, variable, value) %>%
filter(activity == "WALKING" | activity == "LYING", variable == "BodyAcc-mean-X
")  %>%
group_by(subjectId)
df <- arrangeddf2 %>%
select(activity, variable, value) %>%
filter(activity == "WALKING" | activity == "LYING") %>%
filter(variable == "BodyAcc-mean-X
")
df <- arrangeddf2 %>%
select(activity, variable, value) %>%
filter(activity == "WALKING" | activity == "LYING")
View(df)
df %>% filter(variable == "BodyAcc-mean-X")
df <- arrangeddf2 %>%
select(activity, variable, value) %>%
filter(activity == "WALKING" | activity == "LYING") %>%
filter(variable == "BodyAcc-mean-X")
View(df)
attach(df)
boxplot()
boxplot(activity ~ value)
boxplot(value ~ activity)
median(value)
boxplot(value ~ activity)
df <- arrangeddf2 %>%
select(activity, variable, value) %>%
filter(activity == "WALKING" | activity == "LYING") %>%
filter(variable == "BodyAcc-mean-X")
group_by(activity)
df <- arrangeddf2 %>%
select(activity, variable, value) %>%
filter(activity == "WALKING" | activity == "LYING") %>%
filter(variable == "BodyAcc-mean-X") %>%
group_by(activity)
df
boxplot(value ~ activity)
attach(df)
boxplot(value ~ activity)
median(value)
boxplot(value ~ activity)
View(df)
View(arrangeddf2)
df <- arrangeddf2 %>%
select(activity, variable, value) %>%
filter(activity == "WALKING" | activity == "LAYING") %>%
filter(variable == "BodyAcc-mean-X") %>%
group_by(activity)
View(df)
attach(df)
median(value)
boxplot(value ~ activity)
boxplot(value ~ activity, ylim = c(0,1))
boxplot(value ~ activity, ylim = c(0,0.5))
boxplot(value ~ activity, ylim = c(0.2,0.5))
boxplot(value ~ activity, ylim = c(0.2,0.35))
df <- arrangeddf2 %>%
select(activity, variable, value) %>%
filter(activity == "WALKING" | activity == "LAYING") %>%
filter(variable == "BodyAcc-mean-Z") %>%
group_by(activity)
attach(df)
median(value)
boxplot(value ~ activity, ylim = c(0.2,0.35))
boxplot(value ~ activity)
boxplot(value ~ activity, ylim=c(-0.1,0.1))
boxplot(value ~ activity)
boxplot(value ~ activity, ylim = c(-0.5, 0.5))
ggplot(data = df , mapping = aes(x = activity, y=value)) +
geom_box()
ggplot(data = df , mapping = aes(x = activity, y=value)) +
geom_boxplot()
View(df)
install.packages("gapminder")
library(gapminder)
gapminder
df <- gapminder()
df <- gapminder
View(df)
df_argnz <- df %>%
select(country, lifeExp, pop, gpdPercap) %>%
filter(country == "Argentina" | country == "New Zealand")
df_argnz <- df %>%
select(country, lifeExp, pop, gdpPercap) %>%
filter(country == "Argentina" | country == "New Zealand")
View(df_argnz)
attach(df_argnz)
boxplot(gdpPercap ~ lifeExp)
boxplot(country ~ lifeExp)
boxplot(country ~ lifeExp)
boxplot(lifeExp ~ country)
attach(df_argnz)
boxplot(lifeExp ~ country)
boxplot(df_argnz, lifeExp ~ country)
boxplot()
attach(df_argnz)
df_argnz
data(gapminder)
data("gapminder")
library(gapminder)
data("gapminder")
data("gapminder")
force(gapminder)
View(gapminder)
summary(gapminder)
df[which.max(gapminder$gdpPercap)]
df[which.max(gapminder$gdpPercap),]
gapminder[which.max(gapminder$gdpPercap),]
gapminder[which.min(gapminder$gdpPercap),]
?which.min
maxmin <- df()
maxmin <- gapminder[which.min(gapminder$gdpPercap),]
r_bind(maxmin, gapminder[which.max(gapminder$gdpPercap),])
library(tidyverse)
r_bind(maxmin, gapminder[which.max(gapminder$gdpPercap),])
rbind(maxmin, gapminder[which.max(gapminder$gdpPercap),])
maxmin <- gapminder[which.min(gapminder$gdpPercap),] %>%
rbind(maxmin, gapminder[which.max(gapminder$gdpPercap),])
data("gapminder")
force(gapminder)
maxmin <- gapminder[which.min(gapminder$gdpPercap),] %>%
rbind(maxmin, gapminder[which.max(gapminder$gdpPercap),])
maxmin <- gapminder[which.min(gapminder$gdpPercap),] %>%
rbind(gapminder[which.max(gapminder$gdpPercap),])
View(maxmin)
attach(gapminder)
attach("gapminder")
hist()
hist(lifeExp)
hist(pop)
hist(log(pop))
?hist
boxplot(country~pop)
boxplot( pop ~ country)
boxplot( pop ~ continent)
boxplot( lifeExp ~ continent)
boxplot( continent ~ lifeExp)
boxplot( continent ~ lifeExp )
boxplot( lifeExp ~ continent  )
View(gapminder)
df <- select(gapminder, country, lifeExp, pop, gdpPercap)
View(df)
df <- select(gapminder, country, lifeExp, pop, gdpPercap, year)
df <- select(gapminder, country, lifeExp, pop, gdpPercap, year, continent)
df <- select(gapminder, country, lifeExp, pop, gdpPercap, year, continent)
df <- select(gapminder, country, lifeExp, pop, gdpPercap, year, continent) %>%
filter(country = 'Argentina')
df <- select(gapminder, country, lifeExp, pop, gdpPercap, year, continent) %>%
filter(country == 'Argentina' | country == 'New Zealand')
View(df)
attach(df)
boxplot(lifeExp ~ country)
View(df)
boxplot(df, lifeExp ~ country)
attach(df)
boxplot(lifExp ~ country)
boxplot(lifeExp ~ country)
attach(df)
attach?
attach?
()
?attach()
boxplot(data = df, lifeExp ~ country)
ggplot(data = df, mapping = aes(x=country, y=lifeExp)) + geom_boxplot()
boxplot(data = df, lifeExp ~ country, outline = FALSE)
boxplot(data = df, lifeExp ~ country, outline = FALSE, axes = FALSE)
boxplot(data = df, lifeExp ~ country, outline = FALSE, axes = TRUE)
boxplot(data = df, lifeExp ~ country, outline = TRUE, axes = TRUE)
df <- select(gapminder, country, lifeExp, pop, gdpPercap, year, continent) %>%
mutate(filter(country == 'Argentina' | country == 'New Zealand'))
df <- gapminder %>%
mutate(country = case_when(
country == 'Argentina',
country == 'New Zealand'))
df <- gapminder %>%
mutate(country = case_when(
country ~ 'Argentina',
country ~ 'New Zealand'))
df <- gapminder %>%
mutate(country = case_when(
country ~ "Argentina",
country ~ "New Zealand"))
df <- subset(gapminder, country =="Argentina" | country == "New Zealand")
View(df)
data("gapminder")
df <- subset(gapminder, country =="Argentina" | country == "New Zealand")
View(df)
boxplot(df, lifeExp ~ country)
boxplot(lifeExp ~ country)
attach(df)
boxplot(lifeExp ~ country)
ggplot(data = df, mapping = aes(x=country, y=lifeExp)) + geom_boxplot()
boxplot(data = df, lifeExp ~ country)
boxplot(df, lifeExp ~ country)
boxplot(df, lifeExp)
boxplot(df)
boxplot(lifeExp)
boxplot(lifeExp ~ continent )
boxplot(lifeExp ~ country)
gapminder
df
boxplot(lifeExp ~ country)
ggplot(data = df, mapping = aes(x=country, y=lifeExp)) + geom_boxplot()
plot(lifeExp ~ gpdPercap)
plot(lifeExp ~ gdpPercap)
plot(lifeExp ~ log(gdpPercap))
plot( log(gdpPercap  ~ lifeExp))
plot( log(gdpPercap)  ~ lifeExp)
lifeExp
lifeExp
plot(lifeExp ~ log(gdpPercap))
